package cts.academy.trng.integration.dao;

import java.util.List;

import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.ejb.TransactionAttribute;
import javax.ejb.TransactionAttributeType;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import cts.academy.trng.integration.dao.data.Employee;

/**
 * Session Bean implementation class EmployeeDao
 */
@Stateless(mappedName = "EmployeeDao", name = "EmployeeDao")
@LocalBean

public class EmployeeDao {

	@PersistenceContext(unitName = "jdpUnit")
	private EntityManager entityManager;
    
	
	/**
	 * @see EmployeeDaoLocal#getAllEmployees()
	 */
	@SuppressWarnings("unchecked")
	@TransactionAttribute(TransactionAttributeType.NEVER)
	public List<Employee> getAllEmployees() {
		List<Employee> employees = entityManager.createNamedQuery(
				"getAllEmployees").getResultList();
		return employees;
	}

	
	/**
	 * This is used to add an employee to the database.
	 * 
	 * @param employee
	 */
	public void addEmployee(final Employee employee) {
		entityManager.persist(employee);
	}

	/**
	 * This is used to add employees in batch.
	 * 
	 * @param employees
	 */
	public void addEmployees(final List<Employee> employees) {
		for (Employee employee : employees) {
			entityManager.persist(employee);
		}
	}

	/**
	 * This is used to fetch an employee by employee id.
	 * 
	 * @param empID
	 * @return
	 */
	@TransactionAttribute(TransactionAttributeType.NEVER)
	public Employee getEmployeeByID(final Integer empID) {
		return entityManager.find(Employee.class, empID);
	}

}
