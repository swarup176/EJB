package com.cts.training.annotation;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;

public class Validator {
	public static List<String> validate(Object object)
			throws IllegalArgumentException, IllegalAccessException {
		List<String> errorMessage = new ArrayList<String>();
		if (object != null) {
			Field[] allFields = object.getClass().getDeclaredFields();
			for (Field field : allFields) {
				if (!field.isAccessible()) {
					field.setAccessible(true);
				}
				if (field.isAnnotationPresent(Required.class)) {
					validateRequireField(field.getAnnotation(Required.class), field.getName(), field.get(object),
							errorMessage);
				}
				if (field.isAnnotationPresent(Range.class)) {
					validateRangeField(field, object);
				}
			}
		}
		return errorMessage;
	}

	private static void validateRequireField(Required annotation,String fieldName, Object object,
			List<String> errorMsg) {
		if (object == null || object.toString().equals("")) {
			errorMsg.add(annotation.label() + " is required;");
		}
	}

	private static void validateRangeField(Field field, Object object)
			throws IllegalArgumentException, IllegalAccessException {
		if (field.isAnnotationPresent(Range.class)) {
			final Range range = field.getAnnotation(Range.class);
			int min = range.min();
			int max = range.max();
			int value = field.getInt(object);
			if (!((value > min) && (value < max))) {
				System.out.println("give proper range");
			}
		}

	}
}
