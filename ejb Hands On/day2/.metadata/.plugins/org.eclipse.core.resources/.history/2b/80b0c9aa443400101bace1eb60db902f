package com.cts.ejb.training.facade;

import javax.annotation.Resource;
import javax.ejb.EJB;
import javax.ejb.Remote;
import javax.ejb.Stateless;
import javax.ejb.TransactionAttribute;
import javax.ejb.TransactionAttributeType;
import javax.interceptor.Interceptors;
import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.MessageProducer;
import javax.jms.Queue;
import javax.jms.Session;
import javax.jms.TextMessage;

import com.cts.ejb.training.dto.EmployeeDTO;
import com.cts.ejb.training.repository.EmployeeRepository;

@Stateless(name = "employeeManager", mappedName = "employeeManager")
@Interceptors(TestInterceptor.class)
@Remote(EmployeeManager.class)
public class EmployeeManagerImpl implements EmployeeManager {
	@EJB
	private  EmployeeRepository employeeRepository;

	@Resource(mappedName = "queueConFactory")
	ConnectionFactory connectionFactory;
	@Resource(mappedName = "queueJNDI")
	Queue queue;
@TransactionAttribute(TransactionAttributeType.REQUIRED)
	public boolean isAuthorized(EmployeeDTO employeeDTO) {
		// check validation
	  boolean flag=false;
	  
		try {
			flag=employeeRepository.getAuthorization(employeeDTO);
		} catch (Exception exception) {
			exception.printStackTrace();
		}
		
		return flag;
	}

	public void sendData() {
		try {
			System.out.println("Test**********************************");
			Connection connection = connectionFactory.createConnection();
			Session session = (Session) connection.createSession(
					true, Session.AUTO_ACKNOWLEDGE);
//			TopicSubscriber messageReciever = session.createSubscriber(topic);
//			System.out.println("messageReciever: " + messageReciever);
//			if(messageReciever != null){
//			Message message = messageReciever.receive(1000);
//			System.out.println("message: " + message);
//			if (message instanceof TextMessage) {
//				System.out.println("In if message: ");
//				TextMessage textMessage = (TextMessage) message;
//				System.out.println("Test::: " + textMessage.getStringProperty("test"));
//			}
//			}
			MessageProducer messageProducer = session.createProducer(queue);
			TextMessage message1 = session.createTextMessage();
			message1.setStringProperty("test", "swarup............");
			messageProducer.send(message1);
			session.close();
		} catch (Exception exception) {
			
			exception.printStackTrace();
		}
	}
}
