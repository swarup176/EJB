package com.cts.ejb.training.servlet;

import java.io.IOException;
import java.util.List;
import java.util.Properties;

import javax.ejb.EJB;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.cts.ejb.training.dto.EmployeeDTO;
import com.cts.ejb.training.facade.EmployeeManager;
import com.cts.training.annotation.Validator;

/**
 * Servlet implementation class UserAuthentication
 */
@WebServlet("/UserAuthentication")
public class UserAuthentication extends HttpServlet {
	private static final long serialVersionUID = 1L;

	/* @EJB
	 EmployeeManager employeeManager;*/

	/**
	 * Default constructor.
	 */
	public UserAuthentication() {
	}

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doGet(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		doPost(request, response);
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doPost(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		
		  String userID = request.getParameter("userID"); 
		  String userPassword = request.getParameter("userPassword"); 
		  EmployeeDTO employeeDTO = new	  EmployeeDTO(); 
		  employeeDTO.setEmployeeID(userID);
		  employeeDTO.setEmployeePassword(userPassword); 
		  try {
		  System.out.println("*****************"); 
		  RequestDispatcher dispatcher = null; 
		  EmployeeManager employeeManager =  getEmployeeManager(request);
		  List<String> errorMsg = Validator.validate(employeeDTO);
		  System.out.println("*****************errorMsg" + errorMsg); 
		  if(errorMsg != null && !errorMsg.isEmpty()) {
			  dispatcher = request.getRequestDispatcher("/jsp/login.jsp"); StringBuilder
		  
		  stringBuilder = new StringBuilder(); 
			  for (String string : errorMsg) {
		            stringBuilder.append(string); stringBuilder.append("\n"); }
		                 request.setAttribute("errorMsg", stringBuilder.toString()); 
		                 } 
		  else {
		  boolean isAuthorized = employeeManager .isAuthorized(employeeDTO);
		  
		  request.setAttribute("status", ""); 
		  if (isAuthorized) {
			  dispatcher = request .getRequestDispatcher("/jsp/homePage.jsp");
			  request.setAttribute("status", "Login success"); 
		}
		  else {
			  request.setAttribute("status", "Login Failed"); dispatcher =
		  request.getRequestDispatcher("/jsp/login.jsp"); 
			  }
		  }
		  dispatcher.forward(request, response);
	 
		try {
			 employeeManager = getEmployeeManager(request);
			employeeManager.sendData();
		} catch (NamingException e) {
			e.printStackTrace();
		} 
		  }
		catch (Exception e) {
			e.printStackTrace();
		}
		
	}

	private EmployeeManager getEmployeeManager(HttpServletRequest request)
			throws NamingException {
		Properties properties = new Properties();
		properties.put(Context.PROVIDER_URL, "iiop://localhost:4848");
		Context context = new InitialContext(properties);
		EmployeeManager employeeManager = (EmployeeManager) request
				.getSession().getAttribute("employeeManager");
		if (employeeManager == null) {
			employeeManager = (EmployeeManager) context
					.lookup("java:global/ResourceManagement/ResourceManagementEJB/employeeManager");
		}
		request.getSession().setAttribute("employeeManager", employeeManager);
		return employeeManager;
	}
}
