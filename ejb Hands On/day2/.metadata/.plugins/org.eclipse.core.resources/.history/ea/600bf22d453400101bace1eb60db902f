package listener;

import java.util.Properties;

import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageListener;
import javax.jms.Queue;
import javax.jms.QueueConnection;
import javax.jms.QueueConnectionFactory;
import javax.jms.QueueReceiver;
import javax.jms.QueueSender;
import javax.jms.QueueSession;
import javax.jms.Session;
import javax.jms.TextMessage;
import javax.naming.Context;
import javax.naming.InitialContext;

public class Client implements MessageListener
{
   public static void main(String[] args)  throws Exception
   {
      log.info("Creating jndi context - alternatively use a jndi.properties");
      Properties properties = new Properties();
      properties.put(Context.INITIAL_CONTEXT_FACTORY, "org.jnp.interfaces.NamingContextFactory");
      properties.put(Context.URL_PKG_PREFIXES, "org.jnp.interfaces");
      properties.put(Context.PROVIDER_URL, "localhost");
      InitialContext ctx = new InitialContext(properties);

      log.info("Looking up queue");
      Queue queue = (Queue) ctx.lookup("queue/testQueue");

      log.info("Looking up connection factory");
      QueueConnectionFactory qcf = (QueueConnectionFactory) ctx.lookup("UIL2ConnectionFactory");

      log.info("Creating connection");
      QueueConnection qc = qcf.createQueueConnection();
      try
      {
         log.info("Creating session");
         QueueSession qs = qc.createQueueSession(false, Session.CLIENT_ACKNOWLEDGE);
         
         log.info("Creating sender");
         QueueSender sender = qs.createSender(queue);

         log.info("Creating messages");
         TextMessage hello = qs.createTextMessage("hello");
         TextMessage goodbye = qs.createTextMessage("goodbye");

         log.info("Sending messages");
         sender.send(hello);
         sender.send(goodbye);

         log.info("Creating receiver");
         QueueReceiver receiver = qs.createReceiver(queue);

         log.info("You have to start the connection before receiving messages");
         qc.start();

         log.info("Set the message listener");
         receiver.setMessageListener(new Client(qs));

         log.info("Allowing the message listener 10 seconds to receive messages");
         Thread.sleep(10000);
      }
      finally
      {
         qc.close();
      }
   }

   QueueSession session;

   public Client(QueueSession session)
   {
      this.session = session;
   }

   public void onMessage(Message message)
   {
      try
      {
         TextMessage tm = (TextMessage) message;
         String text = tm.getText();
         boolean redelivered = message.getJMSRedelivered();

         log.info("Got message: " + text + " redelivered=" + redelivered);

         if (redelivered)
         {
            log.info("This is the second pass, do a client acknowledgment");
            message.acknowledge();
            return;
         }

         if (text.equals("goodbye"))
         {
            log.info("Got the last message, recover the session forcing redelivery of all messages");
            session.recover();
         }
      }
      catch (JMSException e)
      {
         log.error("Got unexpected error", e);
         System.exit(0);
      }
   }

   public static class log
   {
      public static void info(String message)
      {
         System.out.println(message);
      }

      public static void error(String message, Throwable t)
      {
         System.err.println(message);
         t.printStackTrace();
      }
   }
}

